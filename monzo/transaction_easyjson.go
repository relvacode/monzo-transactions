// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package monzo

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson461f4b12DecodeMonzoTransactionsMonzo(in *jlexer.Lexer, out *TransactionCreated) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			out.AccountID = string(in.String())
		case "currency":
			out.Currency = string(in.String())
		case "amount":
			out.Amount = int(in.Int())
		case "local_currency":
			out.LocalCurrency = string(in.String())
		case "local_amount":
			out.LocalAmount = int(in.Int())
		case "description":
			out.Description = string(in.String())
		case "category":
			out.Category = string(in.String())
		case "settled":
			out.Settled = string(in.String())
		case "merchant":
			(out.Merchant).UnmarshalEasyJSON(in)
		case "notes":
			out.Notes = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "created":
			out.Created = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeMonzoTransactionsMonzo(out *jwriter.Writer, in TransactionCreated) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"account_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"currency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Currency))
	}
	{
		const prefix string = ",\"amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Amount))
	}
	{
		const prefix string = ",\"local_currency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LocalCurrency))
	}
	{
		const prefix string = ",\"local_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.LocalAmount))
	}
	{
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"category\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Category))
	}
	{
		const prefix string = ",\"settled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Settled))
	}
	{
		const prefix string = ",\"merchant\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Merchant).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"notes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Notes))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Created))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TransactionCreated) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeMonzoTransactionsMonzo(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TransactionCreated) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeMonzoTransactionsMonzo(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TransactionCreated) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeMonzoTransactionsMonzo(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TransactionCreated) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeMonzoTransactionsMonzo(l, v)
}
func easyjson461f4b12DecodeMonzoTransactionsMonzo1(in *jlexer.Lexer, out *Merchant) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "category":
			out.Category = string(in.String())
		case "address":
			(out.Address).UnmarshalEasyJSON(in)
		case "group_id":
			out.GroupID = string(in.String())
		case "logo":
			out.Logo = string(in.String())
		case "emoji":
			out.Emoji = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "created":
			out.Created = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeMonzoTransactionsMonzo1(out *jwriter.Writer, in Merchant) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"category\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Category))
	}
	{
		const prefix string = ",\"address\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Address).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"group_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.GroupID))
	}
	{
		const prefix string = ",\"logo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Logo))
	}
	{
		const prefix string = ",\"emoji\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Emoji))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Created))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Merchant) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeMonzoTransactionsMonzo1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Merchant) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeMonzoTransactionsMonzo1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Merchant) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeMonzoTransactionsMonzo1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Merchant) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeMonzoTransactionsMonzo1(l, v)
}
func easyjson461f4b12DecodeMonzoTransactionsMonzo2(in *jlexer.Lexer, out *Entity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "created":
			out.Created = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeMonzoTransactionsMonzo2(out *jwriter.Writer, in Entity) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Created))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Entity) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeMonzoTransactionsMonzo2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Entity) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeMonzoTransactionsMonzo2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Entity) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeMonzoTransactionsMonzo2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Entity) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeMonzoTransactionsMonzo2(l, v)
}
func easyjson461f4b12DecodeMonzoTransactionsMonzo3(in *jlexer.Lexer, out *Address) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "city":
			out.City = string(in.String())
		case "country":
			out.Country = string(in.String())
		case "latitude":
			out.Latitude = float64(in.Float64())
		case "longitude":
			out.Longitude = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson461f4b12EncodeMonzoTransactionsMonzo3(out *jwriter.Writer, in Address) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"city\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.City))
	}
	{
		const prefix string = ",\"country\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Country))
	}
	{
		const prefix string = ",\"latitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Latitude))
	}
	{
		const prefix string = ",\"longitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Longitude))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Address) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson461f4b12EncodeMonzoTransactionsMonzo3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Address) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson461f4b12EncodeMonzoTransactionsMonzo3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Address) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson461f4b12DecodeMonzoTransactionsMonzo3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Address) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson461f4b12DecodeMonzoTransactionsMonzo3(l, v)
}
